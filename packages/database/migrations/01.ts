import type { Kysely } from 'kysely';

console.log("Starting migration 01")

export async function up(db: Kysely<any>): Promise<void> {
    await db.schema.createTable('user')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('first_name', 'text')
        .addColumn('last_name', 'text')
        .addColumn('email', 'text')
        .addColumn('password', 'text')
        .addColumn('phone_number', 'text')
        .addColumn('meta', 'json')
        .addColumn('kind', 'text')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('kyc')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('user_id', 'integer', (col) => col.references('user.id'))
        .addColumn('national_id_front', 'text')
        .addColumn('passport_photo', 'text')
        .addColumn('driving_license', 'text')
        .addColumn('vehicle_registration', 'text')
        .addColumn('insurance_certificate', 'text')
        .addColumn('certificate_of_good_conduct', 'text')
        .addColumn('vehicle_data', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('comments', 'text')
        .addColumn('is_verified', 'boolean', (col) => col.defaultTo(false))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('admin')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('name', 'text')
        .addColumn('email', 'text')
        .addColumn('password', 'text')
        .addColumn('role', 'text')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('school')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('user_id', 'integer')
        .addColumn('name', 'text')
        .addColumn('location', 'text')
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('student')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('school_id', 'integer')
        .addColumn('parent_id', 'integer')
        .addColumn('name', 'text')
        .addColumn('gender', 'text')
        .addColumn('address', 'text')
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('route')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('admin_id', 'integer', (col) => col.references('admin.id'))
        .addColumn('route_name', 'text')
        .addColumn('comments', 'text')
        .addColumn('route', 'json')
        .addColumn('schedule', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('vehicle')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('user_id', 'integer', (col) => col.references('user.id'))
        .addColumn('fleet_manager_id', 'integer')
        .addColumn('vehicle_name', 'text')
        .addColumn('registration_number', 'text')
        .addColumn('vehicle_type', 'text')
        .addColumn('vehicle_model', 'text')
        .addColumn('vehicle_year', 'integer')
        .addColumn('vehicle_image_url', 'text')
        .addColumn('seat_count', 'integer')
        .addColumn('available_seats', 'integer', (col) => col.defaultTo(0))
        .addColumn('is_inspected', 'boolean', (col) => col.defaultTo(false))
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('ride')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('route_id', 'integer', (col) => col.references('route.id'))
        .addColumn('vehicle_id', 'integer', (col) => col.references('vehicle.id'))
        .addColumn('driver_id', 'integer', (col) => col.references('user.id'))
        .addColumn('school_id', 'integer', (col) => col.references('school.id'))
        .addColumn('student_id', 'integer', (col) => col.references('student.id'))
        .addColumn('parent_id', 'integer', (col) => col.references('user.id'))
        .addColumn('schedule', 'json')
        .addColumn('comments', 'text')
        .addColumn('admin_comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('skip_day')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('ride_id', 'integer', (col) => col.references('ride.id'))
        .addColumn('date', 'date')
        .addColumn('student_id', 'integer', (col) => col.references('student.id'))
        .addColumn('school_id', 'integer', (col) => col.references('school.id'))
        .addColumn('parent_id', 'integer', (col) => col.references('user.id'))
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('daily_ride')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('ride_id', 'integer', (col) => col.references('ride.id'))
        .addColumn('vehicle_id', 'integer', (col) => col.references('vehicle.id'))
        .addColumn('driver_id', 'integer', (col) => col.references('user.id'))
        .addColumn('start_time', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('end_time', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('location')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('daily_ride_id', 'integer', (col) => col.references('daily_ride.id'))
        .addColumn('latitude', 'text')
        .addColumn('longitude', 'text')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .execute()

    await db.schema.createTable('payment')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('ride_id', 'integer', (col) => col.references('ride.id'))
        .addColumn('driver_id', 'integer', (col) => col.references('user.id'))
        .addColumn('amount', 'decimal')
        .addColumn('paybill_number', 'text')
        .addColumn('payment_method', 'text')
        .addColumn('payment_status', 'text')
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('maintenance')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('fleet_manager_id', 'integer', (col) => col.references('user.id'))
        .addColumn('vehicle_id', 'integer', (col) => col.references('vehicle.id'))
        .addColumn('start_date', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('description', 'text')
        .addColumn('mechanic', 'text')
        .addColumn('cost', 'decimal')
        .addColumn('mileage', 'decimal')
        .addColumn('next_maintenance', 'date')
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('fuel')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('fleet_manager_id', 'integer', (col) => col.references('user.id'))
        .addColumn('vehicle_id', 'integer', (col) => col.references('vehicle.id'))
        .addColumn('quantity', 'decimal')
        .addColumn('amount', 'decimal')
        .addColumn('unit_cost', 'decimal')
        .addColumn('location', 'text')
        .addColumn('notes', 'text')
        .addColumn('comments', 'text')
        .addColumn('meta', 'json')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    await db.schema.createTable('notification')
        .addColumn('id', 'serial', (col) => col.primaryKey())
        .addColumn('user_id', 'integer', (col) => col.references('user.id'))
        .addColumn('title', 'text')
        .addColumn('message', 'text')
        .addColumn('meta', 'json')
        .addColumn('is_read', 'boolean', (col) => col.defaultTo(false))
        .addColumn('kind', 'text')
        .addColumn('section', 'text')
        .addColumn('created_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('updated_at', 'timestamp', (col) => col.defaultTo('now()'))
        .addColumn('status', 'text')
        .execute()

    // tables to seed,
    await db.insertInto('admin')
        .values(
            { name: "David Marko", email: "david@davemarko.com", password: "!dm@davemarko", role: "Admin", status: "Active" },
        )
        .execute()
    
}

export async function down(db: Kysely<any>): Promise<void> {
    await db.schema.dropTable('user').cascade().execute()
    await db.schema.dropTable('kyc').cascade().execute()
    await db.schema.dropTable('admin').cascade().execute()
    await db.schema.dropTable('school').cascade().execute()
    await db.schema.dropTable('student').cascade().execute()
    await db.schema.dropTable('route').cascade().execute()
    await db.schema.dropTable('vehicle').cascade().execute()
    await db.schema.dropTable('ride').cascade().execute()
    await db.schema.dropTable('skip_day').cascade().execute()
    await db.schema.dropTable('daily_ride').cascade().execute()
    await db.schema.dropTable('location').cascade().execute()
    await db.schema.dropTable('payment').cascade().execute()
    await db.schema.dropTable('maintenance').cascade().execute()
    await db.schema.dropTable('fuel').cascade().execute()
    await db.schema.dropTable('notification').cascade().execute()
}